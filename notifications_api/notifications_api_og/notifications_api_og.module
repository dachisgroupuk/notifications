<?php

/**
 * @todo Implement 
 */

/**
 * Hooks for opportunity module for nodeapi
 * - type, op and factory
 *
 * @author Maarten Jacobs
 */
 
/**
 * Returns a list of uids of the given group
 *
 * @param int $gid Group nid
 * @return array
 * @author Maarten Jacobs
 */
function notifications_api_og_get_group_uids($gid) {
  $og_uids = array(
    'members' => array(),
    'admins' => array(),
  );
  $users_query = db_query(og_list_users_sql(), $gid);
  while ($row = db_fetch_array($users_query)) {
    if ($row['is_admin']) {
      $og_uids['admins'][] = $row['uid'];
    } else {
      $og_uids['members'][] = $row['uid'];
    }
  }
  return $og_uids;
}

/**
 * Run _notifications_api_hook_notify for any nodeapi operations
 * we care about.
 * Implements hook_nodeapi().
 *
 * @author Rachel Graves
 * @return @void
 */
function notifications_api_og_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  switch ($op) {
    case 'view':
    case 'insert':
    case 'update':
    case 'delete':
      notifications_api_notify('node', $op, $node);
      break;
  }
}

/**
 * Implements hook_comment().
 *
 * @author Rachel Graves
 */
function notifications_api_og_comment(&$comment, $op) {
  switch ($op) {
    case 'view':
    case 'insert':
    case 'update':
    case 'unpublish':
      notifications_api_notify('comment', $op, (array)$comment);
      break;
  }  
}

/**
 * Implements hook_notifications_api_generate() to generate notifications by factory
 *
 * @author Maarten Jacobs
 */
function notifications_api_og_notifications_api_generate(&$factory) {
  
  $hook_name = 'og_notification';
  $current_space = spaces_get_space();
  $og_uids = notifications_api_og_get_group_uids($current_space->group->nid);
  foreach (module_implements($hook_name) as $module) {
    $function = $module . '_' . $hook_name;
    if ($factory->getType() == 'node') {
      $function($og_uids, $factory->getType(), $factory->getOp(), $factory, $factory->getPayload()->type);
    } else {
      $function($og_uids, $factory->getType(), $factory->getOp(), $factory);
    }
  }
  
}